install.packages("shinydashboard")
library(argparse)
example("ArgumentParser")
#install.packages("shinydashboard")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(argparse)
parser <- ArgumentParser()
parser$add_argument("--donor_list_csv")
parser$add_argument("--pipeline_dirs", nargs='+')
args <- parser$parse_args()
## app.R ##
ui <- dashboardPage(
dashboardHeader(title = "USCMD Output Summary"),
dashboardSidebar(
sidebarMenu(
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard")),
menuItem("Widgets", tabName = "widgets", icon = icon("th"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "dashboard",
fluidRow(
# A static valueBox
valueBox(33, "Number of Samples", icon = icon("align-right")),
# A static valueBox
valueBox(3450, "Number of Cells / Sample", icon = icon("align-right")),
# A static valueBox
valueBox(100, "Quality", icon = icon("align-right"))
),
fluidRow(
box(plotOutput("plot1", height = 250),
background = 'black'),
# box(plotOutput("plot2", height = 250),
#     background = 'black'),
# box(plotOutput("plot3", height = 250),
#     background = 'black'),
box(
title = "Controls",
background = 'black',
sliderInput("slider", "Max Age of Donor:", 1, 100, 50)
)
)
),
# Second tab content
tabItem(tabName = "widgets",
h2("Widgets tab content")
)
)
)
)
server <- function(input, output) {
set.seed(122)
donor_df <- read.csv(args$donor_list_csv)
print(donor_df)
constructed_df <- data.frame(
sample_name = character(),
pre_UMI_num = character()
)
for (pipeline_dir in args$pipeline_dirs){
step5_path <- file.path(pipeline_dir, "step5_out", "mutations_NoIntervals", "mutations.csv")
step5_mutation_df <- read.csv(step5_path, header=F)
summarised_df <- step5_mutation_df %>%
group_by(V1) %>%
summarise(pre_UMI_num = sum(V4)) %>%
rename(sample_name = V1)
constructed_df = rbind(constructed_df, summarised_df)
#donor_df$mutation_num_pre_UMI <- new_col
}
print(constructed_df)
combined_df <- inner_join(donor_df, constructed_df, by="sample_name")
print(combined_df)
output$plot1 <- renderPlot({
data <- combined_df
ggplot(data, aes(x=sample_name, y=pre_UMI_num, group = sex)) +
theme_minimal() + theme_bw() +
ylab('Mutation Number (no UMI correction)') + xlab('Sample') +
geom_bar(stat = 'identity', position = 'dodge2', alpha = 0.5, aes(color = mutation_type, fill = mutation_type))
})
# output$plot2 <- renderPlot({
#   data <- recovered
#   ggplot(data, aes(x=Code, y=`Recovered Second Variants`, group = factor(visit))) +
#     theme_minimal() + theme_bw() +
#     ylab('Mutation Number') + xlab('Sample') +
#     geom_bar(stat = 'identity', position = 'dodge2', alpha = 0.5, aes(fill = factor(visit))) +
#     scale_fill_manual(values = c('grey30', 'blue', 'skyblue'))
# })
# output$plot3 <- renderPlot({
#   data <- scaled[scaled$Age < input$slider,]
#   ggplot(data, aes(x=Code, y=scaled_muts, group = visit)) +
#     theme_minimal() + theme_bw() +
#     ylab('Mutation Number') + xlab('Sample') +
#     geom_bar(stat = 'identity', position = 'dodge2', alpha = 0.5, aes(fill = Age))
# })
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(argparse)
?shinApp
?shinyApp
